generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  role               Role
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  firstName          String
  lastName           String
  supabaseId         String              @unique
  qrCode             String?
  qrCodeData         String?
  admins             Admin?
  events             Event[]
  eventFeedbacks     EventFeedback[]
  eventRegistrations EventRegistration[]
  masters            Master?
  students           Student?
}

model Department {
  id       String    @id @default(uuid())
  name     String
  faculty  String
  Admin    Admin[]
  programs Program[]
  students Student[]
}

model Program {
  id           String     @id @default(uuid())
  name         String
  departmentId String
  admins       Admin[]
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  students     Student[]
}

model Student {
  id                  String                @id @default(uuid())
  userId              String                @unique
  departmentId        String?
  programId           String?
  currentSemester     Int?
  currentYear         Int?
  registrationNumber  String?               @unique
  dateOfBirth         DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  university          String?
  HackathonTeamInvite HackathonTeamInvite[]
  HackathonTeamMember HackathonTeamMember[]
  department          Department?           @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  program             Program?              @relation(fields: [programId], references: [id], onDelete: Cascade)
  user                User                  @relation(fields: [userId], references: [supabaseId], onDelete: Cascade)
}

model Admin {
  id           String      @id @default(uuid())
  userId       String      @unique
  departmentId String?
  programId    String?
  position     String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  program      Program?    @relation(fields: [programId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [supabaseId], onDelete: Cascade)
}

model Master {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [supabaseId], onDelete: Cascade)
}

model Event {
  id                         String              @id @default(uuid())
  slug                       String              @unique
  name                       String
  description                String
  key_highlights             String[]
  note                       String?
  poster_url                 String
  mode                       EventMode
  address                    String?
  start_date                 DateTime
  end_date                   DateTime?
  start_time                 DateTime
  end_time                   DateTime?
  event_type                 EventType
  status                     EventStatus
  registration_required      Boolean
  registration_link          String?
  registration_limit         Int?
  recording_link             String?
  feedback_form_link         String?
  tags                       String[]
  organizer_name             String
  organizer_contact          String?
  is_paid                    Boolean             @default(false)
  ticket_price               Int?
  current_registration_count Int                 @default(0)
  feedback_score             Float?
  created_at                 DateTime            @default(now())
  updated_at                 DateTime            @updatedAt
  createdById                String
  qrCode                     String?
  qrCodeData                 String?
  created_by                 User                @relation(fields: [createdById], references: [supabaseId], onDelete: Cascade)
  feedbacks                  EventFeedback[]
  registrations              EventRegistration[]
  speakers                   EventSpeaker[]
}

model EventSpeaker {
  id        String   @id @default(uuid())
  name      String
  bio       String?
  photo_url String?
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventRegistration {
  id          String    @id @default(uuid())
  userId      String
  eventId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  attended    Boolean   @default(false)
  checkedInAt DateTime?
  checkedInBy String?
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [supabaseId], onDelete: Cascade)
}

model EventFeedback {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [supabaseId], onDelete: Cascade)
}

model Hackathon {
  id                      String                      @id @default(uuid())
  name                    String
  description             String
  location                String
  poster_url              String
  start_date              DateTime
  end_date                DateTime
  start_time              DateTime
  end_time                DateTime
  registration_start_date DateTime
  registration_end_date   DateTime
  registration_limit      Int?
  mode                    EventMode
  status                  EventStatus
  tags                    String[]
  organizer_name          String
  organizer_contact       String?
  evaluationCriteria      String[]
  team_size_limit         Int?
  created_at              DateTime                    @default(now())
  updated_at              DateTime                    @updatedAt
  qrCode                  String?
  qrCodeData              String?
  problemStatements       HackathonProblemStatement[]
  rules                   HackathonRules[]
  teams                   HackathonTeam[]
}

model HackathonProblemStatement {
  id          String          @id @default(uuid())
  hackathonId String
  code        String
  title       String
  description String
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  hackathon   Hackathon       @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  teams       HackathonTeam[]
}

model HackathonRules {
  id          String    @id @default(uuid())
  hackathonId String
  rule        String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
}

model HackathonTeam {
  id                 String                     @id @default(uuid())
  hackathonId        String
  problemStatementId String?
  teamName           String
  teamId             String?
  hackathon          Hackathon                  @relation(fields: [hackathonId], references: [id])
  problemStatement   HackathonProblemStatement? @relation(fields: [problemStatementId], references: [id], onDelete: Cascade)
  invites            HackathonTeamInvite[]
  members            HackathonTeamMember[]
}

model HackathonTeamMember {
  id        String        @id @default(uuid())
  teamId    String
  studentId String
  attended  Boolean       @default(false)
  student   Student       @relation(fields: [studentId], references: [id])
  team      HackathonTeam @relation(fields: [teamId], references: [id])
}

model HackathonTeamInvite {
  id        String        @id @default(uuid())
  teamId    String
  studentId String
  status    InviteStatus  @default(PENDING)
  student   Student       @relation(fields: [studentId], references: [id])
  team      HackathonTeam @relation(fields: [teamId], references: [id])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum EventMode {
  ONLINE
  OFFLINE
}

enum EventType {
  SESSION
  WORKSHOP
  WEBINAR
  OTHER
}

enum EventStatus {
  UPCOMING
  COMPLETED
  CANCELLED
  OTHER
}

enum Role {
  STUDENT
  ADMIN
  MASTER
}
